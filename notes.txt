>>always focus on an "investigative" learning : wherein you investigate and check everything physically while learning.

>>master "objects" and the "web/browser events"

>>the string has a lot of methods for performing various operations over the string. (trim,replace), like can be used over the URLs.

>>the timstamp can be used to compare the time values 

>>Always look into which function or method manipulates the original value, like in the slice and splice method of array.
    >in the splice the selected value is taken out from the main array.

>> 
>Primitive Strings and String Objects: Primitive strings (like "pappu") are immutable and stored in the stack. String objects created using new String() are reference types stored in the heap.

>Reassigning a Reference: When you reassign a reference variable (like userTwo), it simply points to a new memory location; it does not affect the original reference (user in this case).

>Value vs. Reference: In JavaScript, primitive types (like numbers and strings) are copied by value, while reference types (like objects and arrays) are copied by reference.

and thats why when u use the == operator

    >Primitive strings are compared by value, so two strings with  
     thesame content are considered equal.
     String objects are compared by reference, so even if two objects
    >have the same content, they are not considered equal unless they   
     reference the same object in memory.

>> unshift --->, shift <---

>>prototype, prototype-chaining

>>JSON formatter for formatting and beautifying the api requests

>>you can make snippets and using call stack in it , you can track the sequence of the execution.

>>as the for in loop is used to iterate over the objects in arrays aswell it shows the indices in the key.

>>

------------------------shortcuts:------------------------------------

 alt + up/down arrow = shift the line
 alt + shift + arrow = copy the entire line
 ctrl + Enter - to run the callstack


 -----------------------identifiers:------------------------------------

 identifiers and the variables can be used interchangibly, as  they are used to refer to variables and other entities in the js.
 eg:
 let userName = "Alice"; // `userName` is an identifier for the variable holding the string "Alice" 

 ------------------------------------------------------------------------

 